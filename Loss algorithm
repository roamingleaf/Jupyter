import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
sess=tf.Session()
x_val=np.random.normal(1,0.1,100)
y_val=np.repeat(10.,100)
x_data1=tf.placeholder(shape=[1],dtype=tf.float32)
y_target1=tf.placeholder(shape=[1],dtype=tf.float32)
x_data=tf.placeholder(shape=[None,1],dtype=tf.float32)
y_target=tf.placeholder(shape=[None,1],dtype=tf.float32)
w=tf.Variable(tf.constant(0.,shape=[1,1]))
w1=tf.Variable(tf.constant(0.))
y_pred=tf.matmul(x_data,w)
y_pred1=tf.multiply(x_data1,w1)
#loss=tf.square(y_pred-y_target)
loss=tf.reduce_mean(tf.square(y_pred-y_target))
loss1=tf.reduce_mean(tf.square(y_pred1-y_target1))
batch_size=20
#initialize our variables
init=tf.global_variables_initializer()
sess.run(init)
#print(x_val)
#print(y_val)

my_opt=tf.train.GradientDescentOptimizer(learning_rate=0.02)
train_step=my_opt.minimize(loss)
train_step1=my_opt.minimize(loss1)
n_iterations=100
loss_batch=[]
for i in range(n_iterations):
    rand_index=np.random.choice(100,size=batch_size)
    x_batch=np.transpose([x_val[rand_index]])
    y_batch=np.transpose([y_val[rand_index]])
    W_st=sess.run(train_step,feed_dict={x_data:x_batch,y_target:y_batch})
    if(i+1)%5==0:
       # print('Batch Step No.',str(i+1),'W=',str(W_st))
        temp_loss=sess.run(loss,feed_dict={x_data:x_batch,y_target:y_batch})
        loss_batch.append(temp_loss)
        #print('Batch loss=',temp_loss)
loss_stochastic=[]
for i in range(n_iterations):
    rand_index=np.random.choice(100)
    rand_x=[x_val[rand_index]]
    rand_y=[y_val[rand_index]]
    W_st=sess.run(train_step1,feed_dict={x_data1:rand_x,y_target1:rand_y})
    if(i+1)%5==0:
        #print('Stoch Step No.',str(i+1),'W=',str(W_st))
        temp_loss=sess.run(loss1,feed_dict={x_data1:rand_x,y_target1:rand_y})
        loss_stochastic.append(temp_loss)
        #print('Stoch loss=',temp_loss)
        
plt.plot(range(0,100,5),loss_stochastic,'s-',label='Stochastic Loss',color='g')
plt.plot(range(0,100,5),loss_batch,'b-',label='batch Loss',color='r')
plt.legend(loc='upper right')
plt.title=('Batch training vs Stochastic training')
plt.show()
